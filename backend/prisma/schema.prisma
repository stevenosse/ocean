// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         Role      @default(USER)
  projects     Project[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

enum DeploymentStatus {
  pending
  in_progress
  completed
  failed
}

model Project {
  id                   Int               @id @default(autoincrement())
  name                 String
  repositoryUrl        String            @map("repository_url")
  branch               String?
  dockerComposeFile    String?           @map("docker_compose_file")
  dockerServiceName    String?           @map("docker_service_name")
  active               Boolean           @default(true)
  webhookSecret        String?           @map("webhook_secret")
  githubInstallationId Int?              @map("github_installation_id")
  rootFolder           String            @map("root_folder")
  buildCommand         String?           @map("build_command")
  startCommand         String?           @map("start_command")
  installCommand       String?           @map("install_command")
  outputDirectory      String?           @map("output_directory")
  applicationUrl       String?           @map("application_url")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @default(now()) @updatedAt @map("updated_at")
  userId               Int?              @map("user_id")
  user                 User?             @relation(fields: [userId], references: [id])
  deployments          Deployment[]
  environments         Environment[]
  managedDatabases     ManagedDatabase[]

  @@map("projects")
}

model Deployment {
  id                Int              @id @default(autoincrement())
  project           Project          @relation(fields: [projectId], references: [id])
  projectId         Int              @map("project_id")
  commitHash        String           @map("commit_hash")
  commitMessage     String?          @map("commit_message")
  status            DeploymentStatus @default(pending)
  logs              String?
  startedAt         DateTime         @default(now()) @map("started_at")
  completedAt       DateTime?        @map("completed_at")
  containerName     String?          @map("container_name")
  containerPort     Int?             @map("container_port")
  monitoringEnabled Boolean           @default(false) @map("monitoring_enabled")
  errorMessage      String?          @map("error_message")
  lastHealthCheck   DateTime?         @map("last_health_check")
  restartCount      Int              @default(0) @map("restart_count")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @default(now()) @updatedAt @map("updated_at")

  @@map("deployments")
}

model Environment {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int      @map("project_id")
  key       String
  value     String
  isSecret  Boolean  @default(false) @map("is_secret")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([projectId, key])
  @@map("environments")
}

model ManagedDatabase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  username  String
  password  String
  host      String
  port      Int      @default(5432)
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id])
  backups   DatabaseBackup[]
}

model DatabaseBackup {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  databaseId  Int
  database    ManagedDatabase @relation(fields: [databaseId], references: [id])
  backupPath  String
  size        Int
  status      String
}
